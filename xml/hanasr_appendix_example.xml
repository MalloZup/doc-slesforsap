<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<appendix xmlns="http://docbook.org/ns/docbook" version="5.0"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xml:id="app-hana-sr-example">
 <title>Examples</title>
 <sect1>
  <title>Example <literal>sleha-init</literal> Configuration</title>

<screen>suse01:~ # sleha-init
ntp on
Enabling sshd service
Generating ssh key
Configuring csync2
csync2 is already configured - overwrite? [y/N] y
Generating csync2 shared key (this may take a while)...done
Enabling csync2 service
Enabling xinetd service
csync2 checking files
Enabling sshd service
Generating ssh key
Configuring csync2
csync2 is already configured - overwrite? [y/N] y
Generating csync2 shared key (this may take a while)...done
Enabling csync2 service
Enabling xinetd service
csync2 checking files
Configure Corosync:
This will configure the cluster messaging layer. You will need
to specify a network address over which to communicate (default
is eth0's network, but you can use the network address of any
active interface), a multicast address and multicast port.
/etc/corosync/corosync.conf already exists - overwrite? [y/N] y
Network address to bind to (e.g.: 192.168.1.0) [192.168.1.0]
Multicast address (e.g.: 239.x.x.x) [239.107.222.58] 238.50.0.1
Multicast port [5404]
Configure SBD:
If you have shared storage, for example a SAN or iSCSI target,
you can use it avoid split-brain scenarios by configuring SBD.
This requires a 1 MB partition, accessible to all nodes in the
cluster. The device path must be persistent and consistent
across all nodes in the cluster, so /dev/disk/by-id/* devices
are a good choice. Note that all data on the partition you
specify here will be destroyed.
Do you wish to use SBD? [y/N] y
Path to storage device (e.g. /dev/disk/by-id/...) [] /dev/disk/by-id/SBDA
All data on /dev/disk/by-id/SBDA will be destroyed
Are you sure you wish to use this device [y/N] y
Initializing SBD......done
Enabling hawk service
HA Web Konsole is now running, to see cluster status go to:
https://192.168.1.10:7630/
Log in with username 'hacluster', password 'linux'
WARNING: You should change the hacluster password to something more secure!
Enabling openais service
Waiting for cluster........done
Loading initial configuration
Done (log saved to /var/log/sleha-bootstrap.log)
Change the hacluster password</screen>
 </sect1>
 <sect1>
  <title>Example Cluster Configuration in <literal>crmsh</literal> Format</title>

  <para>
   The following complete crm configuration is for a two-node cluster
   (suse01, suse02) and a SAP HANA database with SID SLE and instance number
   00. The virtual IP address in the example is 192.168.1.20
  </para>

<screen>node suse01
node suse02

primitive rsc_SAPHanaTopology_SLE_HDB00 ocf:suse:SAPHanaTopology \
        operations $id="rsc-sap2-SLE-HDB00-operations" \
        op monitor interval="10" timeout="300" \
        op start interval="0" timeout="300" \
        op stop interval="0" timeout="300" \
        params SID="SLE" InstanceNumber="00"
primitive rsc_SAPHana_SLE_HDB00 ocf:suse:SAPHana \
        operations $id="rsc-sap-SLE-HDB00-operations" \
        op monitor interval="61" role="Slave" timeout="700" \
        op start interval="0" timeout="3600" \
        op stop interval="0" timeout="3600" \
        op promote interval="0" timeout="3600" \
        op monitor interval="60" role="Master" timeout="700" \
        params SID="SLE" InstanceNumber="00" PREFER_SITE_TAKEOVER="true"
DUPLICATE_PRIMARY_TIMEOUT="7200" AUTOMATED_REGISTER=“false“
primitive rsc_ip_SLE_HDB00 ocf:heartbeat:IPaddr2 \
        meta target-role="Started" is-managed="true" \
        operations $id="rsc-ip-SLE-HDB00-operations" \
        op monitor interval="10s" timeout="20s" \
        params ip="192.168.1.20"
primitive stonith-sbd stonith:external/sbd \
        op start interval=“0“ time=“15“ start-delay=“5“
ms msl_SAPHana_SLE_HDB00 rsc_SAPHana_SLE_HDB00 \
        meta is-managed="true" notify="true" clone-max="2" clone-node-max="1" target-role="Started"
interleave="true"
clone cln_SAPHanaTopology_SLE_HDB00 rsc_SAPHanaTopology_SLE_HDB00 \
        meta is-managed="true" clone-node-max="1" target-role="Started" interleave="true"
colocation col_saphana_ip_SLE_HDB00 2000: rsc_ip_SLE_HDB00:Started
order ord_SAPHana_SLE_HDB00 2000: cln_SAPHanaTopology_SLE_HDB00 msl_SAPHana_SLE_HDB00
msl_SAPHana_SLE_HDB00:Master
property $id="cib-bootstrap-options" \
        dc-version="1.1.10-f3eeaf4" \
        cluster-infrastructure="classic openais (with plugin)" \
        expected-quorum-votes="2" \
        no-quorum-policy="ignore" \
        stonith-enabled="true" \
        stonith-action="reboot" \
        stonith-timeout="150s" \
        last-lrm-refresh="1398346620"
rsc_defaults $id="rsc-default-options" \
        resource-stickiness="1000" \
        migration-threshold="5000"
op_defaults $id="op-defaults-options" \
        timeout="600"</screen>
 </sect1>
 <sect1>
  <title>Example for /etc/corosync/corosync.conf</title>

  <para>
   The following file shows a typical corosync configuration with one ring.
   Please view SUSE product documentation about details and about additional
   rings.
  </para>

<screen>aisexec {
        #Group to run aisexec as. Needs to be root for Pacemaker
        group: root
        #User to run aisexec as. Needs to be root for Pacemaker
        user:  root
}
service {
        #Default to start mgmtd with pacemaker
        use_mgmtd:      yes
        #Use logd for pacemaker
        use_logd:       yes
        ver:   0
        name:  pacemaker
}
totem {
        #The mode for redundant ring. None is used when only 1 interface
        #specified, otherwise, only active or passive may be choosen
        rrp_mode:       none
        #How long to wait for join messages in membership protocol. in ms
        join:  60
        #The maximum number of messages that may be sent by one processor
        #on receipt of the token.
        max_messages:   20
        #The virtual synchrony filter type used to indentify a primary
        #component. Change with care.
        vsftype:        none
        #Timeout for a token lost. in ms
        token: 5000
        #How long to wait for consensus to be achieved before starting a
        #new round of membership configuration.
        consensus:      6000
        interface {
                #Network Address to be bind for this interface setting
                bindnetaddr:    192.168.1.0
                member {
                        memberaddr:        192.168.1.10
                }
                member {
                        memberaddr:        192.168.1.11
                }
                #The multicast port to be used
                mcastport:      5405
                #The ringnumber assigned to this interface setting
                ringnumber:     0
        }
        #HMAC/SHA1 should be used to authenticate all message
        secauth:        on
        #The only valid version is 2
        version:        2
        #How many threads should be used to encypt and sending message.
        #Only have meanings when secauth is turned on
        threads:        4
        #
        transport:      udpu
        #How many token retransmits should be attempted before forming a
        #new configuration.
        token_retransmits_before_loss_const:    28
        #To make sure the auto-generated nodeid is positive
        clear_node_high_bit:    new
}
logging {
        #Log to a specified file
        to_logfile:       no
        #Log to syslog
        to_syslog:        yes
        #Whether or not turning on the debug information in the log
        debug:  off
        #Log timestamp as well
        timestamp:        off
        #Log to the standard error output
        to_stderr:        no
        #Logging file line in the source code as well
        fileline:         off
        #Facility in syslog
        syslog_facility:        daemon
}
amf {
        #Enable or disable AMF
        mode:   disable
}</screen>
 </sect1>
 <sect1>
  <title>Example for the IPMI STONITH Method</title>

<screen>primitive rsc_suse01_stonith stonith:external/ipmi \
params hostname="suse01" ipaddr="192.168.1.100" userid="stonith"
passwd="k1llm3" interface="lanplus" \
op monitor interval="1800" timeout="30"
...
primitive rsc_suse02_stonith stonith:external/ipmi \
params hostname="suse02" ipaddr="192.168.1.101" userid="stonith"
passwd="k1llm3" interface="lanplus" \
op monitor interval="1800" timeout="30"
...
location loc_suse01_stonith rsc_suse01_stonith -inf: suse01
location loc_suse02_stonith rsc_suse02_stonith -inf: suse02</screen>
 </sect1>
</appendix>
