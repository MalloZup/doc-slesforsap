<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.s4s.component">
 <title>Components of &sles4sap;</title>

 <para>
  &sles4sapreg; consists of several components such as &sleha;,
  the Kernel page-cache limit feature, and an Installation
  Wizard, which are briefly explained in the following sections.
 </para>
 <sect1 xml:id="sec.s4s.hana-replicate">
  <title>Resource Agents for &hana; System Replication</title>

  <para>
   &sles4sap; supports &hana; System Replication using components of &sleha;
   and two additional resource agents (RA).
  </para>

  <sect2 xml:id="sec.s4s.hana-ra">
   <title><systemitem>SAPHana</systemitem> Resource Agent</title>
   <!--
    Terms:
    + scale-up: adding more resources to an existing system
    + scale-out: adding complementary systems to your existing ones

    Replication is orthogonal to either of these: It is possible with either
    scale-up or scale-out scenarios. (It is just that SLES does not support
    scale-out at the moment.)

    Fixme/12 SP2: Are scale-out scenarios supported? FATE#318793
    - sknorr, 2016-02-04
   -->
   <!--
    Feedback from Fabian Herschel regarding the word "failover":
    "[W]e should be careful about terms like "failover" or "takeover". Because
    in the SAP HANA ecosystem, the terms are all used twice but differently
    than we do. As normally only SAP HANA users will be interested in details
    about the RAs, I suggest to follow the SAP wording to avoid confusion."
    => Use "takeover".
   -->
   <para>
    This resource agent from SUSE supports scale-up scenarios by checking the
    &hana; database instances for whether a takeover needs to happen.
    Unlike with the pure SAP solution, takeovers can be automated.
   </para>
   <para>
    It is configured as a master/slave resource: The master assumes
    responsibility for the &hana; databases running in primary mode,
    whereas the slave is responsible for instances
    that are operated in synchronous (secondary) status. In case of takeover,
    the secondary (slave resource instance) can automatically be promoted to
    become the new primary (master resource instance).
   </para>

   <para>
    This resource agent supports system replication for the following in
    scale-up scenarios:
   </para>
   <itemizedlist>
    <listitem>
     <formalpara>
      <title>Performance-Optimized Scenario</title>
      <para>
       Two systems (A and B) within the same &sleha; cluster, one primary (A)
       and one secondary (B). The primary system (A) is
       replicated synchronously to the secondary system (B).
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>Cost-Optimized Scenario</title>
      <para>
       The basic setup of A and B is the same as in the
       <emphasis>Performance-Optimized Scenario</emphasis>.
       However, the secondary system (B) is also used for non-productive
       purposes, such as for a development or QA database. If a takeover occurs,
       the system resources for the productive database are increased via a
       SAP hook call-out script. The non-productive system will be stopped
       before the takeover is being processed.
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>Chain/Multi-Tier Scenario</title>
      <para>
       Three systems (A, B, and C), of which two are located within the
       same &sleha; cluster (A and B). The third system (C) is located
       externally. The primary system (A) is replicated synchronously to the
       secondary system (B). The secondary system (B) is
       replicated asynchronously to the external system (C).
      </para>
     </formalpara>
     <para>
      If a takeover from A to B occurs, the connection between B and C remains
      untouched. However, B is not allowed to be the source for two systems
      (A and C), as this would be a <quote>star</quote> topology which
      is not supported with current SAP HANA versions (such as SPS11).
     </para>
     <para>
      Using operation instructions, you can configure what happens then:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        The connection between B and C can be broken, so that A to B can
        connect.
       </para>
      </listitem>
      <listitem>
       <para>
        The connection between B and C can be kept if the replication to
        another site is even more important than the local system replication.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
    <para>
     For all of the scenarios, &sles4sap; supports both single-tenant and
     multi-tenant &hana; databases. That is, you can use &hana; databases that
     serve multiple SAP applications.
    </para>
  </sect2>
  <sect2 xml:id="sec.s4s.topology-ra">
   <title><systemitem>SAPHanaTopology</systemitem> Resource Agent</title>
   <para>
    To make configuring the cluster as simple as possible, SUSE has
    developed the <systemitem>SAPHanaTopology</systemitem> resource agent.
    This agent runs on all
    nodes of a &sleha; cluster and gathers information about the status and
    configurations of &hana; system replications. It is designed as a
    normal (stateless) clone.
   </para>
  </sect2>
  <sect2 xml:id="sec.s4s.hana-replicate.more">
   <title>For More Information</title>
   <para>
    For more information, see:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The &haguide; at &docaddress;.
     </para>
    </listitem>
    <listitem>
     <para>
      The <emphasis>White Papers</emphasis> and <emphasis>Best Practice
      Guides</emphasis> in the Resource Library at
      <link xlink:href="https://www.suse.com/products/sles-for-sap/resource-library/"/>.
      For example,
      <link xlink:href="https://www.suse.com/promo/sap/hana/replication.html"/>.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.s4s.component.supplement">
  <title>&supmedia;</title>

  <para>
   The idea behind &supmedia; is to enable
   partners or customers to add their own tasks or workflows to the
   Installation Wizard.
  </para>

  <para>
   This is done by adding a small XML file, which will be part of an &ay;
   XML file. This file must be called <filename>product.xml</filename>; then
   it will be included in the workflow.
  </para>

  <para>
   This can be used for various types of additions, such as adding your own
   RPMs, running your own scripts, setting up a cluster file system or
   creating your own dialogs and scripts.
  </para>

  <sect2 xml:id="sec.s4s.component.supplement.productxml">
   <title><filename>product.xml</filename></title>
   <para>
    The <filename>product.xml</filename> file looks like a normal &ay;
    XML file, but with some restrictions.
   </para>
   <para>
    The restrictions relate to the fact that only the parts for the second
    stage of the installation can be run, because the first stage was
    executed before.
   </para>
   <para>
    Both XML files (<filename>autoyast.xml</filename> and
    <filename>product.xml</filename>) will be merged after the media is read
    and a <quote>new</quote> &ay; XML file is generated on the fly for
    the additional workflow.
   </para>
   <para>
    The following areas or sections will be merged:
   </para>
<screen>&lt;general&gt;
  &lt;ask-list&gt;         <co xml:id="co.s4s.ay.general"/>
  ...
&lt;software&gt;           <co xml:id="co.s4s.ay.software"/>
  &lt;post-packages&gt;
  ...
&lt;scripts&gt;
  &lt;chroot-scripts&gt;   <co xml:id="co.s4s.ay.chroot"/>
  &lt;post-scripts&gt;     <co xml:id="co.s4s.ay.post"/>
  &lt;init-scripts&gt;     <co xml:id="co.s4s.ay.init"/>
  ...</screen>
   <calloutlist>
    <callout arearefs="co.s4s.ay.general">
     <para>
      see <xref linkend="sec.s4s.component.supplement.ask"/>
     </para>
    </callout>
    <callout arearefs="co.s4s.ay.software">
     <para>
      see <xref linkend="sec.s4s.component.supplement.rpm"/>
     </para>
    </callout>
    <callout arearefs="co.s4s.ay.chroot">
     <para>
      after the package installation, before the first boot
     </para>
    </callout>
    <callout arearefs="co.s4s.ay.post">
     <para>
      during the first boot of the installed system, no services running
     </para>
    </callout>
    <callout arearefs="co.s4s.ay.init">
     <para>
      during the first boot of the installed system, all services up and
      running
     </para>
    </callout>
   </calloutlist>
   <para>
    All other sections will be replaced.
   </para>
   <para>
    For the details of other customization options, see the SLES
    <emphasis>&ay; Guide</emphasis>, Chapter 4.16. <quote>Custom User
    Scripts</quote>.
   </para>
  </sect2>

  <sect2 xml:id="sec.s4s.component.supplement.ask">
   <title>Own &ay; Ask Dialogs</title>
   <para>
    For a general overview and details of the Ask feature of &ay;, see
    Chapter 4.19. <quote>Ask the User for Values During Installation</quote>
    of the SLES <emphasis>&ay; Guide</emphasis> (the <emphasis>&ay;
    Guide</emphasis> comes with the product or is available from
    <link xlink:href="http://www.suse.com/documentation/sles-12/"/>).
   </para>
   <para>
    For the &supmedia;, you can only use dialogs within the
    <literal>cont</literal> stage
    (<literal>&lt;stage&gt;cont&lt;/stage&gt;</literal>), which means they
    are executed after the first reboot.
   </para>
   <para>
    Your file with the dialogs will be merged with the base &ay; XML
    file.
   </para>
   <para>
    As a best practice, your dialog should have a dialog number and an
    element number, best with steps of 10. This helps to include later
    additions and could be used as targets for jumping over a dialog or
    element dependent on decisions. We also use this in our base dialogs and
    if you provide the right dialog number and element number, you can place
    your dialog between our base dialogs.
   </para>
   <para>
    You can store the answer to a question in a file, to use it in one of
    your scripts later. Be aware that you <emphasis>must</emphasis> use the
    prefix <literal>/tmp/ay</literal> for this, because the Installation
    Wizard will copy such files from the <filename>/tmp</filename> directory
    to the directory where your media data also will be copied. This is done
    because the next supplemenary media could have the same dialogs or same
    answer file names and would overwrite the values saved here.
   </para>
   <para>
    Here is an example with several options:
   </para>
<screen><![CDATA[<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns"
         xmlns:config="http://www.suse.com/1.0/configns">
<general>
  <ask-list config:type="list">
      <ask>
          <stage>cont</stage>
          <dialog config:type="integer">20</dialog>
          <element config:type="integer">10</element>
          <question>What is your name?</question>
          <default>Enter your name here</default>
          <help>Please enter your full name within the field</help>
          <file>/tmp/ay_q_my_name</file>
          <script>
             <filename>my_name.sh</filename>
             <rerun_on_error config:type="boolean">true</rerun_on_error>
             <environment config:type="boolean">true</environment>
             <source><![CDATA[
function check_name() {
           local name=$1
           LC_ALL=POSIX
           [ -z "$name" ] && echo "You need to provide a name." && return 1
           return 0
}
check_name "$VAL"
]]]]><![CDATA[>
             </source>
             <debug config:type="boolean">false</debug>
             <feedback config:type="boolean">true</feedback>
          </script>
      </ask>
  </ask-list>
</general>
</profile>]]></screen>
  </sect2>

  <sect2 xml:id="sec.s4s.component.supplement.rpm">
   <title>Installing Additional Packages</title>
   <para>
    You can also install RPM packages within the
    <filename>product.xml</filename> file. To do this, you can use the
    <literal>&lt;post-packages&gt;</literal> element for installation in
    stage 2.
   </para>
   <para>
    For more information, see the SLES &ay; Guide, Chapter 4.6.5.
    <quote>Installing Packages in Stage 2</quote>. An example looks as
    follows:
   </para>
<screen><![CDATA[...
<software>
 <post-packages config:type="list">
  <package>yast2-cim</package>
 </post-packages>
</software>
...]]></screen>
  </sect2>

  <sect2>
   <title>Example Directory for the &supmedia;</title>
<screen>&prompt.user; ls
product.xml</screen>
   <remark>
    This alright now? FIXME. - sknorr, 2016-01-21
   </remark>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.s4s.component.clamsap">
  <title>ClamSAP</title>

  <remark>
    Do we need this or is this filler content? If we need this, we might want to
    clean up the relationship NW-VSI ~ virus scan interface ~ transaction VSCAN.
    - sknorr, 2016-01-22
  </remark>

  <para>
   ClamSAP integrates the ClamAV antivirus toolkit with the SAP Virus Scan
   Interface and helps improve cross-platform threat detection.
   It can be installed from the package <systemitem>clamsap</systemitem>.
  </para>

  <para>
   ClamSAP is a shared library that links between ClamAV and the virus
   scan interface of SAP (NW-VSI). An example use case of it would be allowing
   an SAP application to scan for malicious uploads in HTTP uploads.
   To use virus scanning within SAP applications, you can use the
   Virus Scan Interface in SAP (transaction VSCAN).
  </para>
 </sect1>
</chapter>
